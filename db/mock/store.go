// Code generated by MockGen. DO NOT EDIT.
// Source: db/store.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetQuery mocks base method.
func (m *MockStore) GetQuery(statement string, arg ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{statement}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GetQuery", varargs...)
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockStoreMockRecorder) GetQuery(statement interface{}, arg ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{statement}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockStore)(nil).GetQuery), varargs...)
}

// Query mocks base method.
func (m *MockStore) Query(statement string, arg ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{statement}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Query", varargs...)
}

// Query indicates an expected call of Query.
func (mr *MockStoreMockRecorder) Query(statement interface{}, arg ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{statement}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStore)(nil).Query), varargs...)
}
