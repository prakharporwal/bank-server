// Code generated by MockGen. DO NOT EDIT.
// Source: models/store/store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/prakharporwal/bank-server/models/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, arg)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), ctx, arg)
}

// CreateAccountStatementEntry mocks base method.
func (m *MockStore) CreateAccountStatementEntry(ctx context.Context, arg db.CreateAccountStatementEntryParams) (db.AccountTransactionsEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountStatementEntry", ctx, arg)
	ret0, _ := ret[0].(db.AccountTransactionsEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountStatementEntry indicates an expected call of CreateAccountStatementEntry.
func (mr *MockStoreMockRecorder) CreateAccountStatementEntry(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountStatementEntry", reflect.TypeOf((*MockStore)(nil).CreateAccountStatementEntry), ctx, arg)
}

// CreateTransferRecord mocks base method.
func (m *MockStore) CreateTransferRecord(ctx context.Context, arg db.CreateTransferRecordParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransferRecord", ctx, arg)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransferRecord indicates an expected call of CreateTransferRecord.
func (mr *MockStoreMockRecorder) CreateTransferRecord(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransferRecord", reflect.TypeOf((*MockStore)(nil).CreateTransferRecord), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.CreateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.CreateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), ctx, id)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(ctx context.Context, fn func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), ctx, fn)
}

// Execute mocks base method.
func (m *MockStore) Execute(statement string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{statement}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockStoreMockRecorder) Execute(statement interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{statement}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStore)(nil).Execute), varargs...)
}

// GetAccountById mocks base method.
func (m *MockStore) GetAccountById(ctx context.Context, id int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", ctx, id)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockStoreMockRecorder) GetAccountById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockStore)(nil).GetAccountById), ctx, id)
}

// GetAccountByOwnerEmail mocks base method.
func (m *MockStore) GetAccountByOwnerEmail(ctx context.Context, ownerEmail string) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByOwnerEmail", ctx, ownerEmail)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByOwnerEmail indicates an expected call of GetAccountByOwnerEmail.
func (mr *MockStoreMockRecorder) GetAccountByOwnerEmail(ctx, ownerEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByOwnerEmail", reflect.TypeOf((*MockStore)(nil).GetAccountByOwnerEmail), ctx, ownerEmail)
}

// GetBalanceByAccountId mocks base method.
func (m *MockStore) GetBalanceByAccountId(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByAccountId", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByAccountId indicates an expected call of GetBalanceByAccountId.
func (mr *MockStoreMockRecorder) GetBalanceByAccountId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByAccountId", reflect.TypeOf((*MockStore)(nil).GetBalanceByAccountId), ctx, id)
}

// GetBalanceByOwnerEmail mocks base method.
func (m *MockStore) GetBalanceByOwnerEmail(ctx context.Context, ownerEmail string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByOwnerEmail", ctx, ownerEmail)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByOwnerEmail indicates an expected call of GetBalanceByOwnerEmail.
func (mr *MockStoreMockRecorder) GetBalanceByOwnerEmail(ctx, ownerEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByOwnerEmail", reflect.TypeOf((*MockStore)(nil).GetBalanceByOwnerEmail), ctx, ownerEmail)
}

// GetTransaction mocks base method.
func (m *MockStore) GetTransaction(ctx context.Context, uid uuid.UUID) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, uid)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockStoreMockRecorder) GetTransaction(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), ctx, uid)
}

// GetTransactionsList mocks base method.
func (m *MockStore) GetTransactionsList(ctx context.Context) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsList", ctx)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsList indicates an expected call of GetTransactionsList.
func (mr *MockStoreMockRecorder) GetTransactionsList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsList", reflect.TypeOf((*MockStore)(nil).GetTransactionsList), ctx)
}

// GetUserDetails mocks base method.
func (m *MockStore) GetUserDetails(ctx context.Context, userEmail string) (db.GetUserDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetails", ctx, userEmail)
	ret0, _ := ret[0].(db.GetUserDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetails indicates an expected call of GetUserDetails.
func (mr *MockStoreMockRecorder) GetUserDetails(ctx, userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetails", reflect.TypeOf((*MockStore)(nil).GetUserDetails), ctx, userEmail)
}

// ListAccounts mocks base method.
func (m *MockStore) ListAccounts(ctx context.Context, arg db.ListAccountsParams) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, arg)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockStoreMockRecorder) ListAccounts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStore)(nil).ListAccounts), ctx, arg)
}

// Query mocks base method.
func (m *MockStore) Query(statement string, args ...interface{}) *sql.Rows {
	m.ctrl.T.Helper()
	varargs := []interface{}{statement}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockStoreMockRecorder) Query(statement interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{statement}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStore)(nil).Query), varargs...)
}

// UpdateAccountBalanceById mocks base method.
func (m *MockStore) UpdateAccountBalanceById(ctx context.Context, arg db.UpdateAccountBalanceByIdParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalanceById", ctx, arg)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBalanceById indicates an expected call of UpdateAccountBalanceById.
func (mr *MockStoreMockRecorder) UpdateAccountBalanceById(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalanceById", reflect.TypeOf((*MockStore)(nil).UpdateAccountBalanceById), ctx, arg)
}
